{"version":3,"sources":["webpack:///./src/app/views/pages/inventory/providers/create-provider/create-provider.component.html","webpack:///./src/app/views/pages/inventory/providers/providers-list/providers-list.component.html","webpack:///./src/app/views/pages/inventory/providers/providers.component.html","webpack:///./src/app/views/pages/inventory/providers/create-provider/create-provider.component.scss","webpack:///./src/app/views/pages/inventory/providers/create-provider/create-provider.component.ts","webpack:///./src/app/views/pages/inventory/providers/providers-list/providers-list.component.scss","webpack:///./src/app/views/pages/inventory/providers/providers-list/providers-list.component.ts","webpack:///./src/app/views/pages/inventory/providers/providers.component.scss","webpack:///./src/app/views/pages/inventory/providers/providers.component.ts","webpack:///./src/app/views/pages/inventory/providers/providers.module.ts"],"names":[],"mappings":"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","file":"app-views-pages-inventory-providers-providers-module.js","sourcesContent":["module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-xl-12\\\">\\n        <div class=\\\"row row-full-height\\\">\\n            <div class=\\\"col-xl-12\\\">\\n                <kt-portlet>\\n                    <kt-portlet-header title=\\\"Ajouter un Fournisseur\\\" [class]=\\\"'kt-portlet__head--lg'\\\">\\n                    </kt-portlet-header>\\n                    <kt-portlet-body>\\n                        <form class=\\\"kt-form\\\" [formGroup]=\\\"providerForm\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"form-group col-lg-12 validated\\\">\\n                                    <label>description *</label>\\n                                    <input type=\\\"text\\\" [className]=\\\"providerForm.controls['description'].errors && (providerForm.controls['description'].dirty || providerForm.controls['description'].touched) ? 'form-control form-control-sm is-invalid' : 'form-control form-control-sm'\\\" placeholder=\\\"description\\\"\\n                                        #description formControlName=\\\"description\\\" required>\\n                                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"providerForm.controls['description'].errors && (providerForm.controls['description'].dirty || providerForm.controls['description'].touched)\\\">\\n                                        <div *ngIf=\\\"providerForm.controls['description'].errors.required\\\" class=\\\"invalid-feedback\\\">Ce champs est obligatoire</div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"form-group col-lg-3\\\">\\n                                    <label for=\\\"exampleSelects\\\">Type de Fournisseur</label>\\n                                    <select class=\\\"form-control form-control-sm\\\" id=\\\"exampleSelects\\\" formControlName=\\\"provider_type\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<option *ngFor=\\\"let object of providerTypes\\\" [value]=\\\"object.id\\\">{{object.description}}</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</select>\\n                                </div>\\n                                <div class=\\\"form-group col-lg-3\\\">\\n                                    <label for=\\\"exampleSelects\\\">Status de Fournisseur</label>\\n                                    <select class=\\\"form-control form-control-sm\\\" id=\\\"exampleSelects\\\" formControlName=\\\"provider_status\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<option *ngFor=\\\"let object of providerStatus\\\" [value]=\\\"object.id\\\">{{object.description}}</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</select>\\n                                </div>\\n                                <div class=\\\"form-group col-lg-6\\\">\\n                                    <label>Addresse</label>\\n                                    <input type=\\\"text\\\" name=\\\"address\\\" class=\\\"form-control form-control-sm\\\" placeholder=\\\"Addresse\\\" formControlName=\\\"address\\\">\\n                                </div>\\n                                <div class=\\\"form-group col-lg-6 validated\\\">\\n                                    <label>Nom du contact *</label>\\n                                    <input type=\\\"text\\\" [className]=\\\"providerForm.controls['contact_name'].errors && (providerForm.controls['contact_name'].dirty || providerForm.controls['contact_name'].touched) ? 'form-control form-control-sm is-invalid' : 'form-control form-control-sm'\\\"\\n                                        placeholder=\\\"Nom du contact\\\" #contact_name formControlName=\\\"contact_name\\\" required>\\n                                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"providerForm.controls['contact_name'].errors && (providerForm.controls['contact_name'].dirty || providerForm.controls['contact_name'].touched)\\\">\\n                                        <div *ngIf=\\\"providerForm.controls['contact_name'].errors.required\\\" class=\\\"invalid-feedback\\\">Ce champs est obligatoire</div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"form-group col-lg-6 validated\\\">\\n                                    <label>Numero de telephone  *</label>\\n                                    <input type=\\\"text\\\" [className]=\\\"providerForm.controls['phone'].errors && (providerForm.controls['phone'].dirty || providerForm.controls['phone'].touched) ? 'form-control form-control-sm is-invalid' : 'form-control form-control-sm'\\\" placeholder=\\\"phone\\\"\\n                                        #phone formControlName=\\\"phone\\\" required>\\n                                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"providerForm.controls['phone'].errors && (providerForm.controls['phone'].dirty || providerForm.controls['phone'].touched)\\\">\\n                                        <div *ngIf=\\\"providerForm.controls['phone'].errors.required\\\" class=\\\"invalid-feedback\\\">Ce champs est obligatoire</div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"form-group col-lg-3\\\">\\n                                    <label>Fix</label>\\n                                    <input type=\\\"text\\\" name=\\\"fix\\\" class=\\\"form-control form-control-sm\\\" placeholder=\\\"Fix\\\" formControlName=\\\"fix\\\">\\n                                </div>\\n                                <div class=\\\"form-group col-lg-3\\\">\\n                                    <label>Fax</label>\\n                                    <input type=\\\"text\\\" name=\\\"fax\\\" class=\\\"form-control form-control-sm\\\" placeholder=\\\"Fax\\\" formControlName=\\\"fax\\\">\\n                                </div>\\n                                <div class=\\\"form-group col-lg-3\\\">\\n                                    <label>email</label>\\n                                    <input type=\\\"text\\\" name=\\\"email\\\" class=\\\"form-control form-control-sm\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\n                                </div>\\n                                <div class=\\\"form-group col-lg-3\\\">\\n                                    <label>Site Web</label>\\n                                    <input type=\\\"text\\\" name=\\\"website\\\" class=\\\"form-control form-control-sm\\\" placeholder=\\\"website\\\" formControlName=\\\"website\\\">\\n                                </div>\\n                                <div class=\\\"form-group col-lg-4 validated\\\">\\n                                    <label>RC *</label>\\n                                    <input type=\\\"text\\\" [className]=\\\"providerForm.controls['rc'].errors && (providerForm.controls['rc'].dirty || providerForm.controls['rc'].touched) ? 'form-control form-control-sm is-invalid' : 'form-control form-control-sm'\\\" placeholder=\\\"Registre de Commerce\\\"\\n                                        #rc formControlName=\\\"rc\\\">\\n                                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"providerForm.controls['rc'].errors && (providerForm.controls['rc'].dirty || providerForm.controls['rc'].touched)\\\">\\n                                        <div *ngIf=\\\"providerForm.controls['rc'].errors.required\\\" class=\\\"invalid-feedback\\\">Ce champs est obligatoire</div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"form-group col-lg-4 validated\\\">\\n                                    <label>NIF *</label>\\n                                    <input type=\\\"text\\\" [className]=\\\"providerForm.controls['nif'].errors && (providerForm.controls['nif'].dirty || providerForm.controls['nif'].touched) ? 'form-control form-control-sm is-invalid' : 'form-control form-control-sm'\\\" placeholder=\\\"NIF\\\" #nif formControlName=\\\"nif\\\">\\n                                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"providerForm.controls['nif'].errors && (providerForm.controls['nif'].dirty || providerForm.controls['nif'].touched)\\\">\\n                                        <div *ngIf=\\\"providerForm.controls['nif'].errors.required\\\" class=\\\"invalid-feedback\\\">Ce champs est obligatoire</div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"form-group col-lg-4 validated\\\">\\n                                    <label>AI *</label>\\n                                    <input type=\\\"text\\\" [className]=\\\"providerForm.controls['ai'].errors && (providerForm.controls['ai'].dirty || providerForm.controls['ai'].touched) ? 'form-control form-control-sm is-invalid' : 'form-control form-control-sm'\\\" placeholder=\\\"AI\\\" #ai formControlName=\\\"ai\\\">\\n                                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"providerForm.controls['ai'].errors && (providerForm.controls['ai'].dirty || providerForm.controls['ai'].touched)\\\">\\n                                        <div *ngIf=\\\"providerForm.controls['ai'].errors.required\\\" class=\\\"invalid-feedback\\\">Ce champs est obligatoire</div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"form-group col-lg-4\\\">\\n                                    <label for=\\\"exampleSelects\\\">Devise</label>\\n                                    <select class=\\\"form-control form-control-sm\\\" id=\\\"exampleSelects\\\" formControlName=\\\"currency\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<option *ngFor=\\\"let object of currencies\\\" [value]=\\\"object.id\\\">{{object.description}}</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</select>\\n                                </div>\\n                                <div class=\\\"form-group col-lg-4\\\">\\n                                    <label for=\\\"exampleSelects\\\">Taxable</label>\\n                                    <div class=\\\"col-3\\\">\\n                                        <span class=\\\"kt-switch kt-switch--outline kt-switch--icon kt-switch--dark\\\">\\n                                            <label>\\n                                                <input type=\\\"checkbox\\\" name=\\\"dutiable\\\" formControlName=\\\"dutiable\\\" >\\n                                                <span></span>\\n                                        </label>\\n                                        </span>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"form-group col-lg-4\\\">\\n                                    <label for=\\\"exampleSelects\\\">Tax</label>\\n                                    <select class=\\\"form-control form-control-sm\\\" id=\\\"exampleSelects\\\" formControlName=\\\"tax\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<option *ngFor=\\\"let object of taxes\\\" [value]=\\\"object.id\\\">{{object.description}}</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</select>\\n                                </div>\\n                                <div class=\\\"row col-lg-12\\\">\\n                                    <button class=\\\"btn btn-primary btn-elevate col-lg-4\\\" (click)=\\\"addNewItem()\\\">Ajouter un Produit</button>\\n                                </div>\\n                                <br>\\n                                <angular-slickgrid class=\\\"col-lg-12\\\" gridId=\\\"providerproductGrid\\\" [columnDefinitions]=\\\"columnDefinitions\\\" [gridOptions]=\\\"gridOptions\\\" [dataset]=\\\"dataset\\\" (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\n                                </angular-slickgrid>\\n\\n                            </div>\\n                            <div class=\\\"kt-login__actions\\\">\\n                                <button (click)=\\\"submit()\\\" [className]=\\\"loading ? 'btn btn-primary btn-elevate kt-login__btn-primary kt-spinner kt-spinner--right kt-spinner--md kt-spinner--light' : 'btn btn-primary btn-elevate kt-login__btn-primary'\\\">Ajouter Fournisseur</button>\\n                            </div>\\n                        </form>\\n                    </kt-portlet-body>\\n                </kt-portlet>\\n            </div>\\n\\n        </div>\\n    </div>\\n    <div class=\\\"kt-section__content\\\">\\n        <ng-template #content2 let-c=\\\"close\\\" let-d=\\\"dismiss\\\">\\n            <div class=\\\"modal-header\\\">\\n                <h4 class=\\\"modal-title\\\">Code Produit</h4>\\n                <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"d('Cross click')\\\">\\n                    <span aria-hidden=\\\"true\\\">&times;</span>\\n                </button>\\n            </div>\\n            <div class=\\\"modal-body\\\">\\n                <angular-slickgrid gridId=\\\"productGrid\\\" [columnDefinitions]=\\\"productColumnDefinitions\\\" [gridOptions]=\\\"productGridOptions\\\" [dataset]=\\\"productDataset\\\" (onAngularGridCreated)=\\\"productGridReady($event)\\\">\\n                </angular-slickgrid>\\n            </div>\\n            <div class=\\\"modal-footer\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"c('Close click')\\\">Fermer</button>\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"saveProductCode()\\\">Sélectionner</button>\\n            </div>\\n        </ng-template>\\n        <button hidden id=\\\"openProductModal\\\" class=\\\"btn btn-primary\\\" (click)=\\\"open2(content2)\\\">Launch demo modal</button>\\n    </div>\\n</div>\"","module.exports = \"<p>providers-list works!</p>\\n\"","module.exports = \"<router-outlet></router-outlet>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3BhZ2VzL2ludmVudG9yeS9wcm92aWRlcnMvY3JlYXRlLXByb3ZpZGVyL2NyZWF0ZS1wcm92aWRlci5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Provider, InvoicingService, InventoryService } from '../../../../../core/application';\nimport { AngularGridInstance, GridService, Column, GridOption, FieldType, Editors, OnEventArgs, Formatters } from 'angular-slickgrid';\nimport { LayoutUtilsService, MessageType } from '../../../../../core/_base/crud';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { del } from 'selenium-webdriver/http';\nimport { Router } from '@angular/router';\nimport {getRequiredFields} from '../../../../../../helpers';\n\n@Component({\n  selector: 'kt-create-provider',\n  templateUrl: './create-provider.component.html',\n  styleUrls: ['./create-provider.component.scss']\n})\nexport class CreateProviderComponent implements OnInit {\n\n  providerTypes;\n  providerStatus;\n  currencies;\n  taxes;\n\n  providerForm: FormGroup;\n  provider: Provider;\n  loading: boolean = false;\n  hasFormErrors: boolean = false;\n\n  // grid options\n  angularGrid: AngularGridInstance;\n  grid: any;\n  gridService: GridService;\n  dataView: any;\n  columnDefinitions: Column[];\n  gridOptions: GridOption;\n  dataset: any[];\n\n  // product grid\n  productAngularGrid: AngularGridInstance;\n  productGrid: any;\n  productGridService: GridService;\n  productDataView: any;\n  productColumnDefinitions: Column[];\n  productGridOptions: GridOption;\n  productDataset: any = [];\n\n  row_number;\n  providerProduct:[];\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private mService: InvoicingService,\n    private layoutUtilsService: LayoutUtilsService,\n    private modalService: NgbModal,\n    private inventoryService: InventoryService,\n    private router: Router\n  ) { }\n\n  angularGridReady(angularGrid: AngularGridInstance) {\n    this.angularGrid = angularGrid;\n    this.dataView = angularGrid.dataView;\n    this.grid = angularGrid.slickGrid;\n    this.gridService = angularGrid.gridService;\n  }\n\n\n  ngOnInit() {\n    this.initProviderForm();\n    this.initGrid();\n    this.providerTypes = JSON.parse(localStorage.getItem('ProviderType'));\n    this.providerStatus = JSON.parse(localStorage.getItem('ProviderStatus'));\n    this.currencies = JSON.parse(localStorage.getItem('Currency'));\n    this.taxes = JSON.parse(localStorage.getItem('Tax'));\n  }\n  initProviderForm() {\n    this.provider = new Provider();\n    this.providerForm = this.formBuilder.group({\n      description: [this.provider.description, Validators.required],\n      provider_type: this.provider.provider_type_id,\n      provider_status: this.provider.provider_status_id,\n      address: this.provider.address,\n      contact_name: [this.provider.contact_name, Validators.required],\n      phone: [this.provider.mobile_phone_number, Validators.required],\n      fix: this.provider.fix,\n      fax: this.provider.fax,\n      email: this.provider.email,\n      website: this.provider.website,\n      rc: [this.provider.rc],\n      nif: [this.provider.nif],\n      ai: [this.provider.ai],\n      currency: this.provider.purchase_currency_id,\n      dutiable: this.provider.dutiable,\n      tax: this.provider.tax_id\n    })\n  }\n\n  initGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'delete',\n        field: 'id',\n        excludeFromHeaderMenu: true,\n        formatter: Formatters.deleteIcon,\n        minWidth: 30,\n        maxWidth: 30,\n        // use onCellClick OR grid.onClick.subscribe which you can see down below\n        onCellClick: (e: Event, args: OnEventArgs) => {\n          console.log(args);\n          if (confirm('Êtes-vous sûr de supprimer cette ligne?')) {\n            this.angularGrid.gridService.deleteItem(args.dataContext);\n          }\n        }\n      },\n      {\n        id: 'product_code', name: 'Code Produit', field: 'product_code',\n        sortable: true,\n        resizable: true,\n        type: FieldType.string,\n        editor: {\n          model: Editors.text\n        },\n        onCellChange: (e: Event, args: OnEventArgs) => {\n          const updateItem = this.angularGrid.gridService.getDataItemByRowIndex(args.row)\n          var result;\n          this.mService.getProductByCode(args.dataContext.product_code).subscribe(\n            res => result = res['data'],\n            err => this.layoutUtilsService.showActionNotification('Produit avec ce code n\\'existe pas', MessageType.Delete, 5000, true, true),\n            () => {\n              if (result != null) {\n                updateItem.description = result['description'];\n                updateItem.product_id = result['id']\n                this.angularGrid.gridService.updateItem(updateItem);\n              } else {\n                this.layoutUtilsService.showActionNotification('Produit avec ce code n\\'existe pas', MessageType.Delete, 5000, true, true)\n              }\n            }\n          )\n        }\n      },\n      {\n        id: 'delete',\n        field: 'product_id',\n        excludeFromHeaderMenu: true,\n        formatter: Formatters.infoIcon,\n        minWidth: 30,\n        maxWidth: 30,\n        onCellClick: (e: Event, args: OnEventArgs) => {\n          this.row_number = args.row\n          let element: HTMLElement = document.getElementById('openProductModal') as HTMLElement;\n          element.click();\n        }\n      },\n      {\n        id: 'product_description', name: 'Description', field: 'description',\n        sortable: true,\n        resizable: true,\n        width: 130,\n        type: FieldType.string,\n        editor: {\n          model: Editors.text\n        }\n      },\n      {\n        id: 'provider_product_code', name: 'Code Fournisseur', field: 'provider_product_code',\n        sortable: true,\n        resizable: true,\n        width: 130,\n        type: FieldType.string,\n        editor: {\n          model: Editors.text\n        }\n      },\n      {\n        id: 'provider_product_price', name: 'Fournisseur Prix', field: 'provider_product_price',\n        sortable: true,\n        resizable: true,\n        type: FieldType.float,\n        editor: {\n          model: Editors.float\n        }\n      }\n    ];\n    this.gridOptions = {\n      asyncEditorLoading: false,\n      editable: true,\n      enableColumnPicker: true,\n      enableCellNavigation: true,\n      enableRowSelection: true\n    };\n    this.dataset = []\n  }\n  addNewItem() {\n    const newId = this.dataset.length;\n\n    const newItem = {\n      id: newId,\n      provider_id:null,\n      product_code: '',\n      description: '',\n      provider_product_code: null,\n      provider_product_price:null,\n      created_ip_address : getRequiredFields().local_ip,\n      last_updated_ip_address : getRequiredFields().local_ip,\n      created_user_id : getRequiredFields().user_id,\n      last_modified_user_id : getRequiredFields().user_id,\n    };\n    this.angularGrid.gridService.addItemToDatagrid(newItem, false, true, false, false)\n  }\n  open2(content) {\n    this.initProductGrid();\n    this.modalService.open(content);\n  }\n\n  initProductGrid() {\n\n    this.productColumnDefinitions = [\n      {\n        id: 'delete',\n        name: 'id',\n        field: 'id',\n        excludeFromHeaderMenu: true,\n        minWidth: 30,\n        maxWidth: 30,\n        selectable: true\n      },\n      { id: 'product_code', name: 'Code', field: 'product_code', sortable: true, width: 50, filterable: true },\n      { id: 'description', name: 'Description', field: 'description', sortable: true, width: 170, filterable: true },\n      { id: 'unit_price', name: 'Prix', field: 'unit_price', filterable: true }\n\n    ];\n    this.productGridOptions = {\n      enableFiltering: true,\n      asyncEditorLoading: false,\n      enableColumnPicker: true,\n      enableCellNavigation: true,\n      enableRowSelection: true,\n      enableCheckboxSelector: true,\n      autoHeight: true\n\n    };\n\n    this.mService.getAllProducts().subscribe(\n      res => this.productDataset = res\n    )\n\n  }\n\n  productGridReady(angularGrid: AngularGridInstance) {\n    this.productAngularGrid = angularGrid;\n    this.productDataView = angularGrid.dataView;\n    this.productGrid = angularGrid.slickGrid;\n    this.productGridService = angularGrid.gridService;\n  }\n  saveProductCode() {\n    let selected = this.productAngularGrid.gridService.getSelectedRowsDataItem()[0]\n    let updateItem = this.angularGrid.gridService.getDataItemByRowIndex(this.row_number)\n    updateItem.product_code = selected.product_code;\n    updateItem.product_id = selected.id;\n    updateItem.description = selected.description;\n    this.angularGrid.gridService.updateDataGridItem(updateItem);\n    this.modalService.dismissAll('Close click');\n  }\n  submit() {\n    this.hasFormErrors = false;\n    const controls = this.providerForm.controls;\n    /** check form */\n    if (this.providerForm.invalid) {\n      console.log('invalid')\n      Object.keys(controls).forEach(controlName => {\n        controls[controlName].markAsTouched()\n      }\n      );\n\n      this.hasFormErrors = true;\n      return;\n    }\n\n    this.loading = true\n    const tmp = this.prepare();\n\n    this.add(tmp);\n  }\n  // returns the prepared data for save\n  prepare(): Provider {\n    const controls = this.providerForm.controls;\n    const _provider = new Provider();\n    _provider.clear();\n\n    _provider.description = controls['description'].value.toString();\n    _provider.provider_type_id = controls['provider_type'].value;\n    _provider.provider_status_id = controls['provider_status'].value;\n    _provider.address = controls['address'].value;\n    _provider.contact_name = controls['contact_name'].value;\n    _provider.mobile_phone_number = controls['phone'].value;\n    _provider.fix = controls['fix'].value;\n    _provider.fax = controls['fax'].value;\n    _provider.email = controls['email'].value;\n    _provider.website = controls['website'].value;\n    _provider.rc = controls['rc'].value;\n    _provider.nif = controls['nif'].value;\n    _provider.ai = controls['ai'].value;\n    _provider.purchase_currency_id = controls['currency'].value;\n    _provider.dutiable = controls['dutiable'].value;\n    _provider.tax_id = controls['tax'].value;\n    _provider.created_ip_address = getRequiredFields().local_ip;\n    _provider.last_updated_ip_address = getRequiredFields().local_ip;\n    _provider.created_user_id = getRequiredFields().user_id;\n    _provider.last_modified_user_id = getRequiredFields().user_id;\n\n    return _provider;\n  }\n\n  // add product\n\n  add(_provider: Provider) {\n    const message = `Un nouveau fournisseir est ajouté avec succés.`;\n    this.dataset.forEach(element => {\n      delete element.description;\n      delete element.id;\n      delete element.product_code;\n    });\n    this.inventoryService.addProvider({'provider_data':_provider,'provider_products':this.dataset}).subscribe(\n      res => console.log(res),\n      err => {\n        this.layoutUtilsService.showActionNotification('erreur', MessageType.Delete, 5000, true, true);\n        this.loading = false\n      },\n      () => {\n        this.layoutUtilsService.showActionNotification(message, MessageType.Create, 5000, true, true);\n        this.loading = false;\n        this.router.navigateByUrl('/demo1/index');\n\n      }\n    )\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3BhZ2VzL2ludmVudG9yeS9wcm92aWRlcnMvcHJvdmlkZXJzLWxpc3QvcHJvdmlkZXJzLWxpc3QuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kt-providers-list',\n  templateUrl: './providers-list.component.html',\n  styleUrls: ['./providers-list.component.scss']\n})\nexport class ProvidersListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3BhZ2VzL2ludmVudG9yeS9wcm92aWRlcnMvcHJvdmlkZXJzLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { SettingsService } from '../../../../core/application';\n\n@Component({\n  selector: 'kt-providers',\n  templateUrl: './providers.component.html',\n  styleUrls: ['./providers.component.scss']\n})\nexport class ProvidersComponent implements OnInit {\n\n  constructor(private settingsService: SettingsService) { }\n\n  ngOnInit() {\n    this.settingsService.getAll('ProviderType').subscribe(\n      res => {\n        localStorage.setItem('ProviderType', JSON.stringify(res))\n      },\n      err => console.log(err)\n    )\n\n    this.settingsService.getAll('ProviderStatus').subscribe(\n      res => {\n        localStorage.setItem('ProviderStatus', JSON.stringify(res))\n      },\n      err => console.log(err)\n    )\n\n    this.settingsService.getAll('Currency').subscribe(\n      res => {\n        localStorage.setItem('Currency', JSON.stringify(res))\n      },\n      err => console.log(err)\n    )\n\n    this.settingsService.getAll('Tax').subscribe(\n      res => {\n        localStorage.setItem('Tax', JSON.stringify(res))\n      },\n      err => console.log(err)\n    )\n    this.settingsService.getAll('ProviderPaiementType').subscribe(\n      res => {\n        localStorage.setItem('ProviderPaiementType', JSON.stringify(res))\n      },\n      err => console.log(err)\n    )\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgbDate, NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { DatePipe } from '@angular/common'\nimport { PartialsModule } from '../../../partials/partials.module';\nimport { MaterialPreviewModule } from '../../../partials/content/general/material-preview/material-preview.module';\nimport { SettingsService, DataSharingService,InventoryService,InvoicingService } from '../../../../core/application';\n\n\n// Components\n\n// Import AG Grid\nimport { AgGridModule } from 'ag-grid-angular';\n\n// addons\nimport { MatInputModule } from '@angular/material';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\n\nimport { AngularSlickgridModule } from 'angular-slickgrid'\nimport { ProvidersComponent } from './providers.component';\nimport { CreateProviderComponent } from './create-provider/create-provider.component';\nimport { ProvidersListComponent } from './providers-list/providers-list.component';\n\nconst routes: Routes = [\n  {\n      path: '',\n      component: ProvidersComponent,\n      children: [\n          {\n              path: '',\n              redirectTo: 'create-provider',\n              pathMatch: 'full'\n          },\n          {\n              path: 'create-provider',\n              component: CreateProviderComponent\n          },\n          {\n              path: 'providers-list',\n              component: ProvidersListComponent\n          }\n      ]\n  }\n];\n\n@NgModule({\n  imports: [\n      CommonModule,\n      HttpClientModule,\n      RouterModule.forChild(routes),\n      FormsModule,\n      ReactiveFormsModule,\n      PartialsModule,\n      MaterialPreviewModule,\n      NgbModule,\n      MatInputModule,\n      AgGridModule.withComponents([]),\n      AngularSlickgridModule.forRoot()\n  ],\n  exports: [],\n  providers: [SettingsService, NgbActiveModal, DataSharingService, DatePipe, InvoicingService,InventoryService],\n  entryComponents: [],\n  declarations: [ProvidersComponent, CreateProviderComponent, ProvidersListComponent]\n})\nexport class ProvidersModule { }\n"],"sourceRoot":""}